(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TA = window.TA;

var MonsterFight = (function () {
  function MonsterFight() {
    _classCallCheck(this, MonsterFight);

    this.monsters = [{ name: "Bob", health: 900 }, { name: "Ted", health: 200 }];
    this.keyPhrase;
    this.monsterHealth;

    // TA.twitch.chat.on('say', data => {
    //   // Add check to see if user is mod/owner
    //   if (data.message == "!monsterfight") {
    //     $("#monster").fadeIn();
    //     let monster = this.monsters[_.random(0,this.monsters.length - 1)];
    //     this.startSpamAttacks(monster);
    //   }
    // });
  }

  _createClass(MonsterFight, [{
    key: "startSpamAttacks",
    value: function startSpamAttacks(monster) {
      var _this = this;

      this.monsterHealth = monster.health;
      this.getKeyPhrase(30000);
      TA.twitch.chat.on('say', function (data) {
        if (data.message == _this.keyPhrase) {
          _this.monsterHealth -= 1;
        }
      });
    }
  }, {
    key: "getKeyPhrase",
    value: function getKeyPhrase() {
      $.get("http://metaphorpsum.com/sentences/1", function (data) {
        $("#key-phrase").text(data);
      });
    }
  }]);

  return MonsterFight;
})();

var monsterFight = new MonsterFight();
monsterFight.getKeyPhrase();

},{}]},{},[1]);
